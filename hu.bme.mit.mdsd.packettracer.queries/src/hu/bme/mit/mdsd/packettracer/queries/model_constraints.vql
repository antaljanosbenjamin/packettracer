package hu.bme.mit.mdsd.packettracer.queries

import "http://mit.bme.hu/mdsd/packettracer"
import java hu.bme.mit.mdsd.packettracer.queries.ErrorFunctions;

@Constraint(key = {
	element
}, severity = "error", message = "Invalid IP address: $ipAddress$.", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern wrongIPAddressFormat(element, ipAddress : java ^java.lang.String) {
	find hasIPAddress(element, ipAddress);
	check(ErrorFunctions.isInvalidIPAddress(ipAddress));
}

@Constraint(key = {
	networkDevice
}, severity = "error", message = "$networkDevice$'s delay must be non negative!", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern negativeDelay(networkDevice : NetworkDevice, delay : java
^java.lang.Integer) {
	NetworkDevice.delay(networkDevice, delay);
	check(delay < 0);
}

@Constraint(key = {
	element
}, severity = "error", message = "$element$'s bandwidth must be greater than 0!", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern nonPositiveBandwith(element, bandwith : java ^java.lang.Double) {
	Connector.bandwidth(element, bandwith);
	check(bandwith <= 0);
} or {
	Connection.bandwidth(element, bandwith);
	check(bandwith <= 0);
}

@Constraint(key = {
	ni1, ni2
}, severity = "error", message = "Two network interfaces have the same ip address $ipAddress$!", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern
sameIPAddress(ni1 : NetworkInterface, ni2 : NetworkInterface, ipAddress : java
^java.lang.String) {
	NetworkInterface.address(ni1, ipAddress);
	NetworkInterface.address(ni2, ipAddress);
	ni1 != ni2;
}

@Constraint(key = {
	connection
}, severity = "error", message = "The connectors and/or connection type don't match!", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern
wrongConnectorType(connection : Connection, connector1 : Connector, connector2 : Connector) {
	find connectedWithConenction(connection, connector1, connector2);
	Connection.type(connection, type1);
	Connector.type(connector1, type2);
	Connector.type(connector2, type3);
	check(type1 != type2 || type2 != type3);
}

pattern
connectedConnector(networkInterface : NetworkInterface, connector : Connector) {
	NetworkInterface.connectors(networkInterface, connector);
	find connected(connector, _);
}

@Constraint(key = {
	networkInterface
}, severity = "error", message = "The $networkInterface$($networkInterface.address$) has more than one connected connector!", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern multipleConnectorIsConnected(networkInterface : NetworkInterface) {
	connectedConnectorCount == count find connectedConnector(networkInterface, _);
	check(connectedConnectorCount > 1);
}

@Constraint(key = {
	networkInterface
}, severity = "error", message = "The $networkInterface$($networkInterface.address$) IP address is not in the corresponding subnetwork! $subnetwork.networkPrefix$/$subnetwork.networkPrefixLength$!", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern
ipAddressIsOutOfSubnetwork(networkInterface : NetworkInterface, subnetwork : Subnetwork) {
	Subnetwork.networkPrefix(subnetwork, subnetIP);
	Subnetwork.networkPrefixLength(subnetwork, maskLength);
	find subnetwork(networkInterface, subnetwork);
	NetworkInterface.address(networkInterface, ipAddress);
	check(! ErrorFunctions.isInSubnet(subnetIP, maskLength, ipAddress));
}

@Constraint(key = {
	endpoint
}, severity = "error", message = "The $endpoint$ doesn't connected to any other endpoint!", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern notReachableEndpoint(endpoint: Endpoint){
	neg find connectedEndpoints(endpoint, _);
}

@Constraint(key = {
	device
}, severity = "error", message = "The $device$ doesn't connected to at least endpoints!", targetEditorId = "org.eclipse.sirius.diagram.ui.part.SiriusDiagramEditorID", targetEditorId = "hu.bme.mit.mdsd.packettracer.presentation.PackettracerEditorID")
pattern notReachableNetworkDevice(device :NetworkDevice){
	reachedEndpoints == count find connectedDevicesAndEndpoints(device, _);
	check(reachedEndpoints < 2);
}


