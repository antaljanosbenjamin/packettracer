// automatically generated by Xtext
grammar hu.bme.mit.mdsd.packettracer.text.GridDsl with org.eclipse.xtext.common.Terminals

import "http://mit.bme.hu/mdsd/packettracer" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

PacketTracerDiagram returns PacketTracerDiagram:
	'PacketTracerDiagram'
	'{'
		'networkDevices' '{' networkDevices+=NetworkDevice ( "," networkDevices+=NetworkDevice)* '}'
		'endpoints' '{' endpoints+=Endpoint ( "," endpoints+=Endpoint)* '}' 
		('connections' '{' connections+=Connection ( "," connections+=Connection)* '}' )?
		'subnetworks' '{' subnetworks+=Subnetwork ( "," subnetworks+=Subnetwork)* '}' 
	'}';


NetworkDevice returns NetworkDevice:
	'NetworkDevice'
	'{'
		('delay' delay=EInt)?
		('controls' controls=[Subnetwork])?
		'networkInterfaces' '{' networkInterfaces+=NetworkInterface ( "," networkInterfaces+=NetworkInterface)* '}' 
	'}';

Connection returns Connection:
	'Connection'
	'{'
		('type' type=ConnectorType)?
		('bandwidth' bandwidth=EDouble)?
		'from' from=[Connector]
		'to' to=[Connector]
	'}';

Endpoint returns Endpoint:
	'Endpoint'
	name=ID
	'{'
		'networkInterfaces' '{' networkInterfaces+=NetworkInterface ( "," networkInterfaces+=NetworkInterface)* '}' 
	'}';

Subnetwork returns Subnetwork:
	{Subnetwork}
	'Subnetwork'
	name=ID 
	'{'
		('networkPrefix' networkPrefix=EString)?
		('networkPrefixLength' networkPrefixLength=EInt)?
	'}';

NetworkInterface returns NetworkInterface:
	'NetworkInterface'
	'{'
		('address' address=EString)?
		'connectors' '{' connectors+=Connector ( "," connectors+=Connector)* '}' 
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Connector returns Connector:
	{Connector}
	'Connector'
	name=ID 
	'{'
		('type' type=ConnectorType)?
		('bandwidth' bandwidth=EDouble)?
	'}';

EString returns ecore::EString:
	STRING | ID;
	

enum ConnectorType returns ConnectorType:
				RJ45 = 'RJ45' | WIFI2_4G = 'WIFI2_4G' | WIFI5G = 'WIFI5G' | OPTICAL = 'OPTICAL';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
