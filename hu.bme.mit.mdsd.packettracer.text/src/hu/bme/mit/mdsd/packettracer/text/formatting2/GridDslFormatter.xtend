/*
 * generated by Xtext 2.12.0
 */
package hu.bme.mit.mdsd.packettracer.text.formatting2

import com.google.inject.Inject
import hu.bme.mit.mdsd.packettracer.Connection
import hu.bme.mit.mdsd.packettracer.Endpoint
import hu.bme.mit.mdsd.packettracer.NetworkDevice
import hu.bme.mit.mdsd.packettracer.NetworkInterface
import hu.bme.mit.mdsd.packettracer.PacketTracerDiagram
import hu.bme.mit.mdsd.packettracer.Subnetwork
import hu.bme.mit.mdsd.packettracer.text.services.GridDslGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class GridDslFormatter extends AbstractFormatter2 {
	
	@Inject extension GridDslGrammarAccess

	def dispatch void format(PacketTracerDiagram packetTracerDiagram, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (NetworkDevice networkDevice : packetTracerDiagram.getNetworkDevices()) {
			networkDevice.format;
		}
		for (Connection connection : packetTracerDiagram.getConnections()) {
			connection.format;
		}
		for (Endpoint endpoint : packetTracerDiagram.getEndpoints()) {
			endpoint.format;
		}
		for (Subnetwork subnetwork : packetTracerDiagram.getSubnetworks()) {
			subnetwork.format;
		}
	}

	def dispatch void format(NetworkDevice networkDevice, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (NetworkInterface networkInterface : networkDevice.getNetworkInterfaces()) {
			networkInterface.format;
		}
	}
	
	// TODO: implement for Endpoint, NetworkInterface
}
